{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1ZIymeElYbqWqf8BUUiH7vqhaVkv_sHJT","timestamp":1669732830024},{"file_id":"1Aoz1JVK3Mh1h1K1OCzG0z469xP8Ieh15","timestamp":1669661243624}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Pablo Mata Aroco"],"metadata":{"id":"gnpCKFTbl6Vl"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"2dzoM2klOVVa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1669732898334,"user_tz":-60,"elapsed":52701,"user":{"displayName":"Pablo M.","userId":"08716658997747174273"}},"outputId":"41ed5362-3e89-494a-d353-4c16b7efbc46"},"outputs":[{"output_type":"stream","name":"stdout","text":["\r0% [Working]\r            \rHit:1 http://archive.ubuntu.com/ubuntu bionic InRelease\n","\r0% [Waiting for headers] [Waiting for headers] [Connected to developer.download\r                                                                               \rGet:2 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]\n","\r                                                                               \rGet:3 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]\n","Get:4 https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/ InRelease [3,626 B]\n","Hit:5 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic InRelease\n","Get:6 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [83.3 kB]\n","Hit:7 http://ppa.launchpad.net/cran/libgit2/ubuntu bionic InRelease\n","Hit:8 http://ppa.launchpad.net/deadsnakes/ppa/ubuntu bionic InRelease\n","Get:9 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu bionic InRelease [21.3 kB]\n","Ign:10 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  InRelease\n","Get:11 http://archive.ubuntu.com/ubuntu bionic-updates/restricted amd64 Packages [1,303 kB]\n","Get:12 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  InRelease [1,581 B]\n","Get:13 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 Packages [2,338 kB]\n","Hit:14 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Release\n","Get:15 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages [3,497 kB]\n","Get:16 http://security.ubuntu.com/ubuntu bionic-security/universe amd64 Packages [1,563 kB]\n","Get:17 http://security.ubuntu.com/ubuntu bionic-security/main amd64 Packages [3,071 kB]\n","Get:18 http://security.ubuntu.com/ubuntu bionic-security/restricted amd64 Packages [1,262 kB]\n","Get:19 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu bionic/main amd64 Packages [38.5 kB]\n","Get:20 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Packages [1,038 kB]\n","Fetched 14.4 MB in 7s (2,148 kB/s)\n","Reading package lists... Done\n"]}],"source":["appname = \"Auto_insurance\"\n","\n","# Look into https://spark.apache.org/downloads.html for the latest version\n","spark_mirror = \"https://mirrors.sonic.net/apache/spark\"\n","spark_version = \"3.3.1\"\n","hadoop_version = \"3\"\n","\n","# Install Java 8 (Spark does not work with newer Java versions)\n","! apt-get update\n","! apt-get install openjdk-8-jdk-headless -qq > /dev/null\n","\n","# Download and extract Spark binary distribution\n","! rm -rf spark-{spark_version}-bin-hadoop{hadoop_version}.tgz spark-{spark_version}-bin-hadoop{hadoop_version}\n","! wget -q {spark_mirror}/spark-{spark_version}/spark-{spark_version}-bin-hadoop{hadoop_version}.tgz\n","! tar xzf spark-{spark_version}-bin-hadoop{hadoop_version}.tgz\n","\n","# The only 2 environment variables needed to set up Java and Spark\n","import os\n","os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n","os.environ[\"SPARK_HOME\"] = f\"/content/spark-{spark_version}-bin-hadoop{hadoop_version}\"\n","\n","# Set up the Spark environment based on the environment variable SPARK_HOME\n","! pip install -q findspark\n","import findspark\n","findspark.init()\n","\n","# Get the Spark session object (basic entry point for every operation)\n","from pyspark.sql import SparkSession\n","spark = SparkSession.builder.appName(appname).master(\"local[*]\").getOrCreate()"]},{"cell_type":"markdown","source":["##Loading data from kaggle"],"metadata":{"id":"uXpcIqFZRybO"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NDH5gbdeklaO","executionInfo":{"status":"ok","timestamp":1669732919636,"user_tz":-60,"elapsed":21320,"user":{"displayName":"Pablo M.","userId":"08716658997747174273"}},"outputId":"92987808-de01-4128-c524-fe76ed76968f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import os\n","os.environ[\"KAGGLE_CONFIG_DIR\"] = \"/content/drive/MyDrive/kaggle\"\n","\n","from kaggle.api.kaggle_api_extended import KaggleApi\n","api = KaggleApi()\n","api.authenticate()\n","!rm -rf caiis-dogfood-day-2020 caiis-dogfood-day-2020.zip\n","api.competition_download_files('caiis-dogfood-day-2020')\n","\n","from zipfile import ZipFile\n","zf = ZipFile('caiis-dogfood-day-2020.zip')\n","zf.extractall('caiis-dogfood-day-2020')\n","zf.close()\n","train = spark.read.format('csv').options(inferSchema='True',header='True').load('/content/caiis-dogfood-day-2020/train.csv')\n","test = spark.read.format('csv').options(inferSchema='True',header='True').load('/content/caiis-dogfood-day-2020/test.csv')"],"metadata":{"id":"BgvgAy7CRw9c"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Data exploration"],"metadata":{"id":"GTswAjZzMdLa"}},{"cell_type":"code","source":["train.show(5)"],"metadata":{"id":"HXAqX5f-S8iC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1669738980692,"user_tz":-60,"elapsed":87791,"user":{"displayName":"Pablo M.","userId":"08716658997747174273"}},"outputId":"2bec2d57-9467-4af5-ac25-34d88b05c0a0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+---+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+-------------------+-------------------+------------------+------------------+-------------------+-------------------+-------------------+------------------+-------------------+-------------------+------------------+------+\n","| id|cat_0|cat_1|cat_2|cat_3|cat_4|cat_5|cat_6|cat_7|cat_8|cat_9|cat_10|cat_11|cat_12|cat_13|cat_14|cat_15|cat_16|cat_17|cat_18|             cont_0|             cont_1|            cont_2|            cont_3|             cont_4|             cont_5|             cont_6|            cont_7|             cont_8|             cont_9|           cont_10|target|\n","+---+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+-------------------+-------------------+------------------+------------------+-------------------+-------------------+-------------------+------------------+-------------------+-------------------+------------------+------+\n","|  0|    A|    I|    A|    B|    B|   BI|    A|    S|    Q|    A|    LO|     A|     A|     A|     A|     B|     D|     D|     B| 0.6298580932886344| 0.8553490496453626|0.7594386994154677| 0.795549256871245| 0.6819172514031219| 0.6216718236057862| 0.5921843772206821|0.7919207159113629| 0.8152537462248601|  0.965006328742958|0.6659151198639575|     1|\n","|  1|    A|    I|    A|    A|    E|   BI|    K|    W|   AD|    F|    HJ|     A|     B|     A|     B|     D|     B|     D|     B|0.37072710368935663|0.32892942328506936|0.3863848396544993|0.5413662314603979| 0.3889824529295912| 0.3577782607273347| 0.6000435979273233|0.4087010629559668|0.39935257249894734| 0.9274058250023683|0.4937292188969079|     0|\n","|  2|    A|    K|    A|    A|    E|   BI|    A|    E|   BM|    L|    DJ|     A|     B|     A|     A|     B|     D|     D|     B| 0.5022716956789236|0.32274884251498537|0.3432547395332873|0.6163515586940255| 0.7936867983255183| 0.5528768777542055|0.35211338219817845|0.3888348567776837|0.41230312338993824|0.29269552318731995|0.5494523936681402|     1|\n","|  4|    A|    I|    G|    B|    E|   BI|    C|    G|    Q|    A|    DP|     A|     A|     A|     B|     B|     B|     D|     B| 0.2544273861735361| 0.2745137182590417|0.3388179288828572|0.2773076638614053| 0.6105781545188853|0.12829101986825742|  0.578764269381999|0.2791671281711305| 0.3511026549172377| 0.3570835797113264|0.3289598322079217|     0|\n","|  5|    A|    F|    A|    A|    F|   BI|    A|   AH|   AX|    A|    LF|     A|     A|     A|     A|     B|     D|     D|     B| 0.7081197209161232| 0.7356900781822099|0.5783662537758792|0.7231540294835398|0.22803702874381085| 0.3562271656227514| 0.5512491766350025| 0.655693068028917| 0.5983305390406377|0.35998748437710426|0.9474891434294836|     0|\n","+---+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+-------------------+-------------------+------------------+------------------+-------------------+-------------------+-------------------+------------------+-------------------+-------------------+------------------+------+\n","only showing top 5 rows\n","\n"]}]},{"cell_type":"code","source":["from pyspark.sql.functions import *\n","train.select([count(when(isnan(x) | col(x).isNull(), x)).alias(x) for x in data.columns]\n","   ).show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pOCrLSAcaxxj","executionInfo":{"status":"ok","timestamp":1669739018602,"user_tz":-60,"elapsed":21251,"user":{"displayName":"Pablo M.","userId":"08716658997747174273"}},"outputId":"cc69ee2e-02d7-4ebe-f8cf-3066c3784e5f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+---+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+-------+------+\n","| id|cat_0|cat_1|cat_2|cat_3|cat_4|cat_5|cat_6|cat_7|cat_8|cat_9|cat_10|cat_11|cat_12|cat_13|cat_14|cat_15|cat_16|cat_17|cat_18|cont_0|cont_1|cont_2|cont_3|cont_4|cont_5|cont_6|cont_7|cont_8|cont_9|cont_10|target|\n","+---+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+-------+------+\n","|  0|    0|    0|    0|    0|    0|    0|    0|    0|    0|    0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|      0|     0|\n","+---+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+-------+------+\n","\n"]}]},{"cell_type":"code","source":["test.printSchema()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dnUX6WWVags-","executionInfo":{"status":"ok","timestamp":1669646348970,"user_tz":-60,"elapsed":12,"user":{"displayName":"Alberto Glez","userId":"17022000703278640693"}},"outputId":"5dfefbe7-5926-4688-b52e-fdea1ada7cf3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["root\n"," |-- id: integer (nullable = true)\n"," |-- cat_0: string (nullable = true)\n"," |-- cat_1: string (nullable = true)\n"," |-- cat_2: string (nullable = true)\n"," |-- cat_3: string (nullable = true)\n"," |-- cat_4: string (nullable = true)\n"," |-- cat_5: string (nullable = true)\n"," |-- cat_6: string (nullable = true)\n"," |-- cat_7: string (nullable = true)\n"," |-- cat_8: string (nullable = true)\n"," |-- cat_9: string (nullable = true)\n"," |-- cat_10: string (nullable = true)\n"," |-- cat_11: string (nullable = true)\n"," |-- cat_12: string (nullable = true)\n"," |-- cat_13: string (nullable = true)\n"," |-- cat_14: string (nullable = true)\n"," |-- cat_15: string (nullable = true)\n"," |-- cat_16: string (nullable = true)\n"," |-- cat_17: string (nullable = true)\n"," |-- cat_18: string (nullable = true)\n"," |-- cont_0: double (nullable = true)\n"," |-- cont_1: double (nullable = true)\n"," |-- cont_2: double (nullable = true)\n"," |-- cont_3: double (nullable = true)\n"," |-- cont_4: double (nullable = true)\n"," |-- cont_5: double (nullable = true)\n"," |-- cont_6: double (nullable = true)\n"," |-- cont_7: double (nullable = true)\n"," |-- cont_8: double (nullable = true)\n"," |-- cont_9: double (nullable = true)\n"," |-- cont_10: double (nullable = true)\n","\n"]}]},{"cell_type":"code","source":["from pyspark.sql.functions import *\n","test.select([count(when(isnan(x) | col(x).isNull(), x)).alias(x) for x in data.columns]\n","   ).show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mca3i3wBbS3c","executionInfo":{"status":"ok","timestamp":1669736972286,"user_tz":-60,"elapsed":13153,"user":{"displayName":"Pablo M.","userId":"08716658997747174273"}},"outputId":"8a2177a5-7f89-44f0-8988-51a7255c1969"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+---+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+-------+\n","| id|cat_0|cat_1|cat_2|cat_3|cat_4|cat_5|cat_6|cat_7|cat_8|cat_9|cat_10|cat_11|cat_12|cat_13|cat_14|cat_15|cat_16|cat_17|cat_18|cont_0|cont_1|cont_2|cont_3|cont_4|cont_5|cont_6|cont_7|cont_8|cont_9|cont_10|\n","+---+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+-------+\n","|  0|    0|    0|    0|    0|    0|    0|    0|    0|    0|    0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|     0|      0|\n","+---+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+-------+\n","\n"]}]},{"cell_type":"markdown","source":["####Since train and test are already separated, all the pre-processing has to be done equally to both datafames"],"metadata":{"id":"z89p7biPOrGH"}},{"cell_type":"markdown","source":["Encoding categorical variables and creating feature column for train"],"metadata":{"id":"RUdeeNcNkjY8"}},{"cell_type":"code","source":["from pyspark.ml import Pipeline\n","from pyspark.ml.feature import StringIndexer, OneHotEncoder, VectorAssembler\n","\n","categorical_columns= ['cat_0','cat_1','cat_2','cat_3','cat_4','cat_5','cat_6','cat_7','cat_8',\n","                      'cat_9','cat_10','cat_11','cat_12','cat_13','cat_14','cat_15','cat_16','cat_17','cat_18']\n","\n","# The index of string vlaues multiple columns\n","indexers = [\n","    StringIndexer(inputCol=c, outputCol=\"{0}_indexed\".format(c))\n","    for c in categorical_columns\n","]\n","\n","# The encode of indexed vlaues multiple columns\n","encoders = [OneHotEncoder(dropLast=False,inputCol=indexer.getOutputCol(),\n","            outputCol=\"{0}_encoded\".format(indexer.getOutputCol()))\n","    for indexer in indexers\n","]\n","\n","# Vectorizing encoded values\n","assembler = VectorAssembler(inputCols=[encoder.getOutputCol() for encoder in encoders],outputCol=\"features\")\n","\n","pipeline = Pipeline(stages=indexers + encoders+[assembler])\n","model_train=pipeline.fit(train)\n","transformed_train = model.transform(train)\n","transformed_train.show(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oY5AYzxDPNzm","executionInfo":{"status":"ok","timestamp":1669734186863,"user_tz":-60,"elapsed":33566,"user":{"displayName":"Pablo M.","userId":"08716658997747174273"}},"outputId":"e01f66eb-c372-47d0-86aa-73b1342194ce"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","textn","| id|cat_0|cat_1|cat_2|cat_3|cat_4|cat_5|cat_6|cat_7|cat_8|cat_9|cat_10|cat_11|cat_12|cat_13|cat_14|cat_15|cat_16|cat_17|cat_18|             cont_0|             cont_1|            cont_2|            cont_3|             cont_4|             cont_5|             cont_6|            cont_7|             cont_8|             cont_9|           cont_10|target|cat_0_indexed|cat_1_indexed|cat_2_indexed|cat_3_indexed|cat_4_indexed|cat_5_indexed|cat_6_indexed|cat_7_indexed|cat_8_indexed|cat_9_indexed|cat_10_indexed|cat_11_indexed|cat_12_indexed|cat_13_indexed|cat_14_indexed|cat_15_indexed|cat_16_indexed|cat_17_indexed|cat_18_indexed|cat_0_indexed_encoded|cat_1_indexed_encoded|cat_2_indexed_encoded|cat_3_indexed_encoded|cat_4_indexed_encoded|cat_5_indexed_encoded|cat_6_indexed_encoded|cat_7_indexed_encoded|cat_8_indexed_encoded|cat_9_indexed_encoded|cat_10_indexed_encoded|cat_11_indexed_encoded|cat_12_indexed_encoded|cat_13_indexed_encoded|cat_14_indexed_encoded|cat_15_indexed_encoded|cat_16_indexed_encoded|cat_17_indexed_encoded|cat_18_indexed_encoded|            features|\nn","|  0|    A|    I|    A|    B|    B|   BI|    A|    S|    Q|    A|    LO|     A|     A|     A|     A|     B|     D|     D|     B| 0.6298580932886344| 0.8553490496453626|0.7594386994154677| 0.795549256871245| 0.6819172514031219| 0.6216718236057862| 0.5921843772206821|0.7919207159113629| 0.8152537462248601|  0.965006328742958|0.6659151198639575|     1|          0.0|          0.0|          0.0|          1.0|         11.0|          0.0|          0.0|          9.0|         19.0|          0.0|          21.0|           0.0|           0.0|           0.0|           0.0|           0.0|           0.0|           0.0|           0.0|        (2,[0],[1.0])|       (15,[0],[1.0])|       (19,[0],[1.0])|       (13,[1],[1.0])|      (20,[11],[1.0])|       (84,[0],[1.0])|       (16,[0],[1.0])|       (51,[9],[1.0])|      (61,[19],[1.0])|       (19,[0],[1.0])|      (297,[21],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|(621,[0,2,17,37,6...|\n","|  1|    A|    I|    A|    A|    E|   BI|    K|    W|   AD|    F|    HJ|     A|     B|     A|     B|     D|     B|     D|     B|0.37072710368935663|0.32892942328506936|0.3863848396544993|0.5413662314603979| 0.3889824529295912| 0.3577782607273347| 0.6000435979273233|0.4087010629559668|0.39935257249894734| 0.9274058250023683|0.4937292188969079|     0|          0.0|          0.0|          0.0|          0.0|          0.0|          0.0|          6.0|         31.0|          6.0|          3.0|          23.0|           0.0|           1.0|           0.0|           1.0|           1.0|           1.0|           0.0|           0.0|        (2,[0],[1.0])|       (15,[0],[1.0])|       (19,[0],[1.0])|       (13,[0],[1.0])|       (20,[0],[1.0])|       (84,[0],[1.0])|       (16,[6],[1.0])|      (51,[31],[1.0])|       (61,[6],[1.0])|       (19,[3],[1.0])|      (297,[23],[1.0])|         (2,[0],[1.0])|         (2,[1],[1.0])|         (2,[0],[1.0])|         (2,[1],[1.0])|         (4,[1],[1.0])|         (4,[1],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|(621,[0,2,17,36,4...|\n","|  2|    A|    K|    A|    A|    E|   BI|    A|    E|   BM|    L|    DJ|     A|     B|     A|     A|     B|     D|     D|     B| 0.5022716956789236|0.32274884251498537|0.3432547395332873|0.6163515586940255| 0.7936867983255183| 0.5528768777542055|0.35211338219817845|0.3888348567776837|0.41230312338993824|0.29269552318731995|0.5494523936681402|     1|          0.0|          2.0|          0.0|          0.0|          0.0|          0.0|          0.0|          1.0|          0.0|          7.0|           0.0|           0.0|           1.0|           0.0|           0.0|           0.0|           0.0|           0.0|           0.0|        (2,[0],[1.0])|       (15,[2],[1.0])|       (19,[0],[1.0])|       (13,[0],[1.0])|       (20,[0],[1.0])|       (84,[0],[1.0])|       (16,[0],[1.0])|       (51,[1],[1.0])|       (61,[0],[1.0])|       (19,[7],[1.0])|       (297,[0],[1.0])|         (2,[0],[1.0])|         (2,[1],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|(621,[0,4,17,36,4...|\n","|  4|    A|    I|    G|    B|    E|   BI|    C|    G|    Q|    A|    DP|     A|     A|     A|     B|     B|     B|     D|     B| 0.2544273861735361| 0.2745137182590417|0.3388179288828572|0.2773076638614053| 0.6105781545188853|0.12829101986825742|  0.578764269381999|0.2791671281711305| 0.3511026549172377| 0.3570835797113264|0.3289598322079217|     0|          0.0|          0.0|          3.0|          1.0|          0.0|          0.0|          1.0|         15.0|         19.0|          0.0|           2.0|           0.0|           0.0|           0.0|           1.0|           0.0|           1.0|           0.0|           0.0|        (2,[0],[1.0])|       (15,[0],[1.0])|       (19,[3],[1.0])|       (13,[1],[1.0])|       (20,[0],[1.0])|       (84,[0],[1.0])|       (16,[1],[1.0])|      (51,[15],[1.0])|      (61,[19],[1.0])|       (19,[0],[1.0])|       (297,[2],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (2,[1],[1.0])|         (4,[0],[1.0])|         (4,[1],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|(621,[0,2,20,37,4...|\n","|  5|    A|    F|    A|    A|    F|   BI|    A|   AH|   AX|    A|    LF|     A|     A|     A|     A|     B|     D|     D|     B| 0.7081197209161232| 0.7356900781822099|0.5783662537758792|0.7231540294835398|0.22803702874381085| 0.3562271656227514| 0.5512491766350025| 0.655693068028917| 0.5983305390406377|0.35998748437710426|0.9474891434294836|     0|          0.0|          1.0|          0.0|          0.0|          1.0|          0.0|          0.0|          0.0|          2.0|          0.0|          11.0|           0.0|           0.0|           0.0|           0.0|           0.0|           0.0|           0.0|           0.0|        (2,[0],[1.0])|       (15,[1],[1.0])|       (19,[0],[1.0])|       (13,[0],[1.0])|       (20,[1],[1.0])|       (84,[0],[1.0])|       (16,[0],[1.0])|       (51,[0],[1.0])|       (61,[2],[1.0])|       (19,[0],[1.0])|      (297,[11],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|(621,[0,3,17,36,5...|\nn","only showing top 5 rows\n","\n"]}]},{"cell_type":"markdown","source":["Same but for test"],"metadata":{"id":"-_e_j5TbktIN"}},{"cell_type":"code","source":["pipeline = Pipeline(stages=indexers + encoders+[assembler])\n","model_test=pipeline.fit(test)\n","transformed_test = model_test.transform(test)"],"metadata":{"id":"1mS3JMgiO24S"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Standardizing the features"],"metadata":{"id":"tzKivhgrkuZq"}},{"cell_type":"code","source":["from pyspark.ml.feature import StandardScaler\n","\n","stscaler=StandardScaler(inputCol= 'features', outputCol= 'scaled_features')\n","\n","stmodel = stscaler.fit(transformed_train)\n","final_train = stmodel.transform(transformed_train)\n","final_train.show(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CWy04nHLC3na","executionInfo":{"status":"ok","timestamp":1669736569235,"user_tz":-60,"elapsed":10325,"user":{"displayName":"Pablo M.","userId":"08716658997747174273"}},"outputId":"b979a3d2-d739-44da-99e8-ff9d3237feed"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","textn","| id|cat_0|cat_1|cat_2|cat_3|cat_4|cat_5|cat_6|cat_7|cat_8|cat_9|cat_10|cat_11|cat_12|cat_13|cat_14|cat_15|cat_16|cat_17|cat_18|             cont_0|             cont_1|            cont_2|            cont_3|            cont_4|            cont_5|            cont_6|            cont_7|             cont_8|            cont_9|           cont_10|target|cat_0_indexed|cat_1_indexed|cat_2_indexed|cat_3_indexed|cat_4_indexed|cat_5_indexed|cat_6_indexed|cat_7_indexed|cat_8_indexed|cat_9_indexed|cat_10_indexed|cat_11_indexed|cat_12_indexed|cat_13_indexed|cat_14_indexed|cat_15_indexed|cat_16_indexed|cat_17_indexed|cat_18_indexed|cat_0_indexed_encoded|cat_1_indexed_encoded|cat_2_indexed_encoded|cat_3_indexed_encoded|cat_4_indexed_encoded|cat_5_indexed_encoded|cat_6_indexed_encoded|cat_7_indexed_encoded|cat_8_indexed_encoded|cat_9_indexed_encoded|cat_10_indexed_encoded|cat_11_indexed_encoded|cat_12_indexed_encoded|cat_13_indexed_encoded|cat_14_indexed_encoded|cat_15_indexed_encoded|cat_16_indexed_encoded|cat_17_indexed_encoded|cat_18_indexed_encoded|            features|     scaled_features|\nn","|  0|    A|    I|    A|    B|    B|   BI|    A|    S|    Q|    A|    LO|     A|     A|     A|     A|     B|     D|     D|     B| 0.6298580932886344| 0.8553490496453626|0.7594386994154677| 0.795549256871245|0.6819172514031219|0.6216718236057862|0.5921843772206821|0.7919207159113629| 0.8152537462248601| 0.965006328742958|0.6659151198639575|     1|          0.0|          0.0|          0.0|          1.0|         11.0|          0.0|          0.0|          9.0|         19.0|          0.0|          21.0|           0.0|           0.0|           0.0|           0.0|           0.0|           0.0|           0.0|           0.0|        (2,[0],[1.0])|       (15,[0],[1.0])|       (19,[0],[1.0])|       (13,[1],[1.0])|      (20,[11],[1.0])|       (84,[0],[1.0])|       (16,[0],[1.0])|       (51,[9],[1.0])|      (61,[19],[1.0])|       (19,[0],[1.0])|      (297,[21],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|(621,[0,2,17,37,6...|(621,[0,2,17,37,6...|\n","|  1|    A|    I|    A|    A|    E|   BI|    K|    W|   AD|    F|    HJ|     A|     B|     A|     B|     D|     B|     D|     B|0.37072710368935663|0.32892942328506936|0.3863848396544993|0.5413662314603979|0.3889824529295912|0.3577782607273347|0.6000435979273233|0.4087010629559668|0.39935257249894734|0.9274058250023683|0.4937292188969079|     0|          0.0|          0.0|          0.0|          0.0|          0.0|          0.0|          6.0|         31.0|          6.0|          3.0|          23.0|           0.0|           1.0|           0.0|           1.0|           1.0|           1.0|           0.0|           0.0|        (2,[0],[1.0])|       (15,[0],[1.0])|       (19,[0],[1.0])|       (13,[0],[1.0])|       (20,[0],[1.0])|       (84,[0],[1.0])|       (16,[6],[1.0])|      (51,[31],[1.0])|       (61,[6],[1.0])|       (19,[3],[1.0])|      (297,[23],[1.0])|         (2,[0],[1.0])|         (2,[1],[1.0])|         (2,[0],[1.0])|         (2,[1],[1.0])|         (4,[1],[1.0])|         (4,[1],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|(621,[0,2,17,36,4...|(621,[0,2,17,36,4...|\n","+---+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+-------------------+-------------------+------------------+------------------+------------------+------------------+------------------+------------------+-------------------+------------------+------------------+------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+---------------------+---------------------+---------------------+---------------------+---------------------+---------------------+---------------------+---------------------+---------------------+---------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+--------------------+--------------------+\n","only showing top 2 rows\n","\n"]}]},{"cell_type":"code","source":["stmodel2 = stscaler.fit(transformed_test)\n","final_test = stmodel2.transform(transformed_test)\n","final_test.show(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qMDcMxe7PG5h","executionInfo":{"status":"ok","timestamp":1669740019749,"user_tz":-60,"elapsed":6525,"user":{"displayName":"Pablo M.","userId":"08716658997747174273"}},"outputId":"51a6697e-d627-43df-b245-4a588f2aea81"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","textn","| id|cat_0|cat_1|cat_2|cat_3|cat_4|cat_5|cat_6|cat_7|cat_8|cat_9|cat_10|cat_11|cat_12|cat_13|cat_14|cat_15|cat_16|cat_17|cat_18|             cont_0|            cont_1|            cont_2|            cont_3|            cont_4|            cont_5|             cont_6|            cont_7|            cont_8|            cont_9|           cont_10|cat_0_indexed|cat_1_indexed|cat_2_indexed|cat_3_indexed|cat_4_indexed|cat_5_indexed|cat_6_indexed|cat_7_indexed|cat_8_indexed|cat_9_indexed|cat_10_indexed|cat_11_indexed|cat_12_indexed|cat_13_indexed|cat_14_indexed|cat_15_indexed|cat_16_indexed|cat_17_indexed|cat_18_indexed|cat_0_indexed_encoded|cat_1_indexed_encoded|cat_2_indexed_encoded|cat_3_indexed_encoded|cat_4_indexed_encoded|cat_5_indexed_encoded|cat_6_indexed_encoded|cat_7_indexed_encoded|cat_8_indexed_encoded|cat_9_indexed_encoded|cat_10_indexed_encoded|cat_11_indexed_encoded|cat_12_indexed_encoded|cat_13_indexed_encoded|cat_14_indexed_encoded|cat_15_indexed_encoded|cat_16_indexed_encoded|cat_17_indexed_encoded|cat_18_indexed_encoded|            features|     scaled_features|\nn","|  3|    A|    K|    A|    C|    E|   BI|    A|    Y|   AD|    F|    KV|     A|     A|     A|     A|     B|     D|     D|     B| 0.9342419625918952|0.7076629049417019|0.8311474036179455|0.8078069371023433|0.8000324403509642|0.6191471898696493|0.22178892366843675|0.8976170717085774| 0.633669267047496|0.7603181927175735|0.9342422730322448|          0.0|          2.0|          0.0|          2.0|          0.0|          0.0|          0.0|         14.0|          6.0|          3.0|          57.0|           0.0|           0.0|           0.0|           0.0|           0.0|           0.0|           0.0|           0.0|        (2,[0],[1.0])|       (15,[2],[1.0])|       (19,[0],[1.0])|       (13,[2],[1.0])|       (20,[0],[1.0])|       (84,[0],[1.0])|       (16,[0],[1.0])|      (51,[14],[1.0])|       (61,[6],[1.0])|       (19,[3],[1.0])|      (294,[57],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|(618,[0,4,17,38,4...|(618,[0,4,17,38,4...|\n","|  9|    B|    L|    C|    A|    F|   BI|    A|    E|   AX|    A|    HK|     A|     A|     A|     A|     B|     D|     B|     B|0.33869162092899424|0.6660921160282547| 0.598942604348617|0.5619708530803698|0.8063474965896168|0.7359832836875373| 0.5387244553659861|0.3815662487093222|0.4816595295413176|0.3485139817988117| 0.325722956154594|          1.0|          3.0|          1.0|          0.0|          1.0|          0.0|          0.0|          1.0|          2.0|          0.0|           1.0|           0.0|           0.0|           0.0|           0.0|           0.0|           0.0|           1.0|           0.0|        (2,[1],[1.0])|       (15,[3],[1.0])|       (19,[1],[1.0])|       (13,[0],[1.0])|       (20,[1],[1.0])|       (84,[0],[1.0])|       (16,[0],[1.0])|       (51,[1],[1.0])|       (61,[2],[1.0])|       (19,[0],[1.0])|       (294,[1],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (2,[0],[1.0])|         (4,[0],[1.0])|         (4,[0],[1.0])|         (4,[1],[1.0])|         (4,[0],[1.0])|(618,[1,5,18,36,5...|(618,[1,5,18,36,5...|\nn","only showing top 2 rows\n","\n"]}]},{"cell_type":"code","source":["filter_train = final_train.select(col(\"id\"),col(\"scaled_features\"),col(\"target\"))\n","filter_train.show(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BuAm2egqBMaS","executionInfo":{"status":"ok","timestamp":1669739023740,"user_tz":-60,"elapsed":606,"user":{"displayName":"Pablo M.","userId":"08716658997747174273"}},"outputId":"869b841f-11a0-458e-dec3-10ca443736a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+---+--------------------+------+\n","| id|     scaled_features|target|\n","+---+--------------------+------+\n","|  0|(621,[0,2,17,37,6...|     1|\n","|  1|(621,[0,2,17,36,4...|     0|\n","|  2|(621,[0,4,17,36,4...|     1|\n","|  4|(621,[0,2,20,37,4...|     0|\n","|  5|(621,[0,3,17,36,5...|     0|\n","+---+--------------------+------+\n","only showing top 5 rows\n","\n"]}]},{"cell_type":"code","source":["filter_test = final_test.select(col(\"id\"),col(\"scaled_features\"))\n","filter_test.show(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nUdha5jGQtO7","executionInfo":{"status":"ok","timestamp":1669740053718,"user_tz":-60,"elapsed":640,"user":{"displayName":"Pablo M.","userId":"08716658997747174273"}},"outputId":"f0c47c03-fa0d-4de1-8a97-7ebf65bf1178"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+---+--------------------+\n","| id|     scaled_features|\n","+---+--------------------+\n","|  3|(618,[0,4,17,38,4...|\n","|  9|(618,[1,5,18,36,5...|\n","| 11|(618,[0,3,17,37,5...|\n","| 13|(618,[1,2,17,36,4...|\n","| 14|(618,[0,5,17,37,4...|\n","+---+--------------------+\n","only showing top 5 rows\n","\n"]}]},{"cell_type":"markdown","source":["---\n","####Predictions"],"metadata":{"id":"xDTGdq3WlWXp"}},{"cell_type":"markdown","source":["I decided to use a decision tree in order to predict target label, although this could be done with different methods such as Random Forest or Gradient Booster\n","\n","\n"],"metadata":{"id":"wE9V8jUvk5Mw"}},{"cell_type":"code","source":["from pyspark.ml.classification import (RandomForestClassifier, GBTClassifier,\n","                                       DecisionTreeClassifier)\n","print(DecisionTreeClassifier().explainParams())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CpC1ac9RM60-","executionInfo":{"status":"ok","timestamp":1669739256592,"user_tz":-60,"elapsed":238,"user":{"displayName":"Pablo M.","userId":"08716658997747174273"}},"outputId":"75ee0dd8-5da1-4024-839f-1b298623308d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["cacheNodeIds: If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees. Users can set how often should the cache be checkpointed or disable it by setting checkpointInterval. (default: False)\n","checkpointInterval: set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext. (default: 10)\n","featuresCol: features column name. (default: features)\n","impurity: Criterion used for information gain calculation (case-insensitive). Supported options: entropy, gini (default: gini)\n","labelCol: label column name. (default: label)\n","leafCol: Leaf indices column name. Predicted leaf index of each instance in each tree by preorder. (default: )\n","maxBins: Max number of bins for discretizing continuous features.  Must be >=2 and >= number of categories for any categorical feature. (default: 32)\n","maxDepth: Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes. Must be in range [0, 30]. (default: 5)\n","maxMemoryInMB: Maximum memory in MB allocated to histogram aggregation. If too small, then 1 node will be split per iteration, and its aggregates may exceed this size. (default: 256)\n","minInfoGain: Minimum information gain for a split to be considered at a tree node. (default: 0.0)\n","minInstancesPerNode: Minimum number of instances each child must have after split. If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1. (default: 1)\n","minWeightFractionPerNode: Minimum fraction of the weighted sample count that each child must have after split. If a split causes the fraction of the total weight in the left or right child to be less than minWeightFractionPerNode, the split will be discarded as invalid. Should be in interval [0.0, 0.5). (default: 0.0)\n","predictionCol: prediction column name. (default: prediction)\n","probabilityCol: Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities. (default: probability)\n","rawPredictionCol: raw prediction (a.k.a. confidence) column name. (default: rawPrediction)\n","seed: random seed. (default: 1022417807559343011)\n","thresholds: Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values > 0, excepting that at most one value may be 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class's threshold. (undefined)\n","weightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined)\n"]}]},{"cell_type":"code","source":["dtc = DecisionTreeClassifier(labelCol = \"target\", featuresCol = \"scaled_features\", impurity=\"entropy\",seed=-476609685677241813)\n","dtc_model = dtc.fit(filter_train)\n","test_res = dtc_model.transform(filter_test)"],"metadata":{"id":"h8i0cGNMNum1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_res.show(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bByJnNduOEek","executionInfo":{"status":"ok","timestamp":1669740131671,"user_tz":-60,"elapsed":1762,"user":{"displayName":"Pablo M.","userId":"08716658997747174273"}},"outputId":"bc7a12f3-67ca-4141-c1fe-27f0ff0fa64c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+---+--------------------+----------------+--------------------+----------+\n","| id|     scaled_features|   rawPrediction|         probability|prediction|\n","+---+--------------------+----------------+--------------------+----------+\n","|  3|(618,[0,4,17,38,4...|[81554.0,2941.0]|[0.96519320669862...|       0.0|\n","|  9|(618,[1,5,18,36,5...| [7845.0,3946.0]|[0.66533796963785...|       0.0|\n","| 11|(618,[0,3,17,37,5...|[81554.0,2941.0]|[0.96519320669862...|       0.0|\n","| 13|(618,[1,2,17,36,4...|[81554.0,2941.0]|[0.96519320669862...|       0.0|\n","| 14|(618,[0,5,17,37,4...|[81554.0,2941.0]|[0.96519320669862...|       0.0|\n","+---+--------------------+----------------+--------------------+----------+\n","only showing top 5 rows\n","\n"]}]},{"cell_type":"markdown","source":["Extracting insurance policy ids along with its probability values, whether they initiate an insurance claim or not"],"metadata":{"id":"GbmS_L2yXDXc"}},{"cell_type":"code","source":["prueba = test_res\n","\n","prueba = prueba.orderBy(asc(\"id\"))"],"metadata":{"id":"dfjAGSF3Sc2X"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["prueba.show(5,50)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8_uWiP3cbGk2","executionInfo":{"status":"ok","timestamp":1669743905946,"user_tz":-60,"elapsed":5793,"user":{"displayName":"Pablo M.","userId":"08716658997747174273"}},"outputId":"f70abfc8-5306-4b58-b64a-7e72b995c3c5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+---+------------------------------------------------------------+----------------+----------------------------------------+----------+\n","| id|                                             scaled_features|   rawPrediction|                             probability|prediction|\n","+---+------------------------------------------------------------+----------------+----------------------------------------+----------+\n","|  3|(618,[0,4,17,38,49,69,153,183,226,284,357,594,596,598,600...|[81554.0,2941.0]|[0.9651932066986212,0.03480679330137878]|       0.0|\n","|  9|(618,[1,5,18,36,50,69,153,170,222,281,301,594,596,598,600...| [7845.0,3946.0]| [0.6653379696378594,0.3346620303621406]|       0.0|\n","| 11|(618,[0,3,17,37,50,69,153,169,232,281,305,594,596,598,600...|[81554.0,2941.0]|[0.9651932066986212,0.03480679330137878]|       0.0|\n","| 13|(618,[1,2,17,36,49,69,154,177,221,282,324,594,596,598,600...|[81554.0,2941.0]|[0.9651932066986212,0.03480679330137878]|       0.0|\n","| 14|(618,[0,5,17,37,49,69,154,176,222,281,302,595,596,599,601...|[81554.0,2941.0]|[0.9651932066986212,0.03480679330137878]|       0.0|\n","+---+------------------------------------------------------------+----------------+----------------------------------------+----------+\n","only showing top 5 rows\n","\n"]}]},{"cell_type":"code","source":["prueba.printSchema()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uEl6DE9YhceO","executionInfo":{"status":"ok","timestamp":1669744420624,"user_tz":-60,"elapsed":6,"user":{"displayName":"Pablo M.","userId":"08716658997747174273"}},"outputId":"711d7019-829e-4826-af3e-9cc02c23b303"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["root\n"," |-- id: integer (nullable = true)\n"," |-- scaled_features: vector (nullable = true)\n"," |-- rawPrediction: vector (nullable = true)\n"," |-- probability: vector (nullable = true)\n"," |-- prediction: double (nullable = false)\n","\n"]}]},{"cell_type":"code","source":["assignment_results = prueba.select(col(\"id\"), col(\"prediction\"))\n","assignment_results = assignment_results.withColumnRenamed(\"prediction\", \"Target\")\n","assignment_results.show(10)"],"metadata":{"id":"HT0dH0RtNLGa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Due to probability column being type \"double\" instead of array, I found no way to extract each value from the array"],"metadata":{"id":"461OotWMkG4K"}},{"cell_type":"code","source":["kaggle_output = prueba.select(col(\"id\"), col(\"probability\"))\n","# final_output = kaggle_output.withColumn(\"Claim_probability\", kaggle_output[\"probability\"].getItem(1)).withColumn(\"No_claim_probability\", kaggle_output[\"probability\"].getItem(0))\n","# final_output.show(5)\n","# kaggle_output = kaggle_output.filter(array_contains(df(\"languages\"),\"Java\")).show(false)\n","# kaggle_output = kaggle_output.withColumn(\"No_claim_probability\",split(col(\"probability\"),\",\").getItem(0)).drop(\"probability\")"],"metadata":{"id":"kfHmykyOZmur"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Hence, I just renamed the column name for better interpretation of the results"],"metadata":{"id":"Bti-WwXukSN6"}},{"cell_type":"code","source":["kaggle_output = kaggle_output.withColumnRenamed(\"probability\", \"No_claim_vs_claim_probability\")\n","kaggle_output.show(10,50)"],"metadata":{"id":"dpvAFkne-oyE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1669745088810,"user_tz":-60,"elapsed":5196,"user":{"displayName":"Pablo M.","userId":"08716658997747174273"}},"outputId":"5174483f-7c58-4859-9dcc-6f55480a21bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+---+----------------------------------------+\n","| id|           No_claim_vs_claim_probability|\n","+---+----------------------------------------+\n","|  3|[0.9651932066986212,0.03480679330137878]|\n","|  9| [0.6653379696378594,0.3346620303621406]|\n","| 11|[0.9651932066986212,0.03480679330137878]|\n","| 13|[0.9651932066986212,0.03480679330137878]|\n","| 14|[0.9651932066986212,0.03480679330137878]|\n","| 15|[0.9651932066986212,0.03480679330137878]|\n","| 16|[0.9651932066986212,0.03480679330137878]|\n","| 19|[0.9651932066986212,0.03480679330137878]|\n","| 20|[0.9651932066986212,0.03480679330137878]|\n","| 22|[0.9651932066986212,0.03480679330137878]|\n","+---+----------------------------------------+\n","only showing top 10 rows\n","\n"]}]}]}